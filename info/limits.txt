#this file contains guidelines for data integrity in some use cases
#security will be implemented in 3 layers:
	(1)JavaScript
	(2)PHP
	(3)MySQL
#MySQL security will use a lot of Stored Procedures, check notes.txt to see an example

DEFINE "PHPdefault" data security : use mysqli_escape_string then check strlen

I. LOGIN
	a. customer login
		email
			(1) input type=email, required
			(2) filter_var(filter_var($email, FILTER_SANITIZE_EMAIL), FILTER_VALIDATE_EMAIL) //returns boolean
		password
			(1) input type=password min=8, max=32, pattern=[a-zA-Z]*[0-9][a-zA-Z0-9], required
			(2) PHPdefault
			(3) //password in DB is encrypted by sha1(md5(password))
		(3) check if email exists, if exists proceed with checking if password is the same else return message
	b. admin login
		username
			(1) input type=text min=6, max=16, pattern=[a-zA-Z0-9]{6,16}, required
			(2) PHPdefault
		password
			X-ref - I.a.password
		(3) check if username exists, if exists proceed with checking if password is the same else return message

II. LOGOUT
	just do an AJAX request using this URL: ajax/?logout

III. SIGN UP
	email
		X-ref - I.a.email
	password
		X-ref - I.a.password
	firstName
		(1) input type=text min=2, max=40, pattern=[a-zA-Z ]*[-]?[a-zA-Z ]*, required
		(2) PHPefault
	lastName
		(1) input type=text min=2, max=30, pattern=[a-zA-Z ]*[-]?[a-zA-Z ]*, required
		(2) PHPdefault
	contact
		(1) input type=text min=7, max=30, pattern=[()0-9+ -]{7,30}, required
		(2) PHPdefault
	address
		(1) input type=text min=4, max=100, pattern=[a-zA-Z0-9., #'()-]{4,100}, required
		(2) PHPdefault
	birthday
		(1) input type=date, required
		(2) PHPdefault min=10 max=10 + should be in format YYYY-MM-DD

//you can do the others :D